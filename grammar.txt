statements  : NEWLINE* expr (NEWLINE+ expr)* NEWLINE*

expr        : IDENTIFIER EQ expr
            : comp-expr((KEYWORD:AND|KEYWORD:OR) comp-expr)*


comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term((PLUS|MINUS) term)*

term        : factor((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call (POW factor)*

call        : atom(LPAREN (expr (COMMA expr)*)? RPAREN )?

atom        : INT|FLOAT|STRING|IDENTIFIER
            : LPAREN expr RPAREN
            : list-expr
            : if-expr
            : for-expr
            : while-expr
            : func-def

list-expr : LSBRACK (expr (COMMA expr)*)? RSBRACK

if-expr     : KEYWORD:if expr LCBRACK 
              (expr else-if-expr|else-expr) 
            | (NEWLINE statements |else-if-expr|else-expr)  
              RCBRACK
              KEYWORD:elif LPAREN expr RPAREN LCBRACK expr RCBRACK*
              KEYWORD:else LCBRACK expr RCBRACK?

for-expr    : KEYWORD:for LPAREN IDENTIFIER EQ expr KEYWORD:to expr (KEYWORD:step expr)? RPAREN LCBRACK expr RCBRACK

while-expr  : KEYWORD:while LPAREN expr RPAREN LCBRACK expr RCBRACK

func-def    : KEYWORD:func IDENTIFIER 
              LPAREN (IDENTIFIER(COMMA IDENTIFIER)*)? RPAREN
              LCBRACK expr RCBRACK

